# debugging
log stderr all;

ipv4 table peering4;
ipv4 table kernelcopy4;
ipv4 table mesh4;

ipv6 table peering6;
ipv6 table kernelcopy6;
ipv6 table mesh6;
ipv6 table transit6;

roa6 table roa_icvpn6;
roa4 table roa_icvpn4;

protocol device {
	scan time 10;
}

# host configuration
#####################

include "bird_host.conf";

# constants
############

define OWNAS = 201173;
define OWNMAGIC = 42;
define KERNEL_TABLE = ipt_freifunk;



# ROA table:
#############
# These tables are generated by a script in the icvpn-meta repository

protocol static {
	roa4 {table roa_icvpn4; };
	include "roa4.con?";
}

protocol static {
	roa6 {table roa_icvpn6; };
	include "roa6.con?";
}


# filter helpers
#################

function is_default()      { return net ~ [ 0.0.0.0/0, ::/0          ]; }

function is_freifunk()     { return net ~ [ 10.0.0.0/8+, 2001:bf7::/32+ ]; }
function is_dn42()         { return net ~ [ 172.22.0.0/15+, 172.20.0.0/16+ ]; }
function is_chaosvpn()     { return net ~ [ 172.31.0.0/16+     ]; }
function is_self()         { return net ~ [ 10.130.0.0/16+, fdef:ffc0:3dd7::/48+, 2001:67c:2d50::/48+, 2001:bf7:110::/44+ ]; }

function is_self_mesh()    { return net ~ [ 10.130.16.0/20+, 10.130.32.0/20+, fdef:ffc0:3dd7::/64+, 2001:67c:2d50::/64+ ]; }
function is_self_static()  { return net ~ [ 10.130.0.0/20+ ]; }
function is_self_private() { return net ~ [ 10.130.64.0/18+, 10.130.128.0/17 ]; }
function is_self_public()  { return net ~ [ 2001:67c:2d50::/48+ ]; }

function is_global()       { return net ~ [ 2000::/3+           ]; }
function is_ula()          { return net ~ [ fc00::/7{48,64}     ]; }
function is_self_mgmt()    { return net ~ [ 10.130.127.224/27+, 2001:67c:2d50:1::a82:7fe0/123+ ]; }



# Filters:
###########

filter bgp_import_filter {
	if is_self() then reject;
	if is_ula() then accept;

	if roa_check(roa_icvpn4) = ROA_VALID || roa_check(roa_icvpn6) = ROA_VALID then {
		accept;
	} else {
		print "ROA check failed for ", net, " ASN ", bgp_path.last;
	}
	accept;
};



# static routes
################

protocol static static_mesh4 {
	ipv4 { table peering4; };
	route 10.130.0.0/16 reject;
};



protocol static local_mesh4 {
	ipv4;
	route 10.130.0.0/16 via "ffhl";
};


protocol static local_mesh6 {
	ipv6 { table peering6; } ;
	route fdef:ffc0:3dd7::/64 via "ffhl";
	route 2001:67c:2d50::/64 via "ffhl";
};


protocol static local_freifunk {
	ipv6 { table peering6; };

	route fdef:ffc0:3dd7::/48 reject;
	route 2001:67c:2d50::/48 reject;
}




protocol static mesh_dn42 {
	ipv4 { table mesh4; };
	route 172.20.0.0/16 reject;
	route 172.22.0.0/15 reject;
};


protocol static mesh_freifunk {
	ipv4 { table mesh4; };
	route 10.0.0.0/8 reject;
};

# Mesh-internal routing
########################

protocol rip rip_mesh4 {
	ipv4 {
		table mesh4;
		import where is_self_private();
		export where !((OWNMAGIC, 1) ~ bgp_community) && !is_self_mesh();
	};

	interface "ffhl";
};

protocol rip ng rip_mesh6 {
	ipv6 {
		table mesh6;
		preference 10;
		import where is_self() && !is_self_mgmt();
		export where is_self() || is_default() || (!((OWNMAGIC, 1) ~ bgp_community) && is_ula()) || source = RTS_STATIC;
	};

	interface "ffhl";
}







# OSPF between gateways
########################

protocol ospf v3 ospf_mesh {
	ipv4 {
		preference 90;
		export where !((OWNMAGIC, 1) ~ bgp_community) && proto != "rip_mesh";
		import all;
	};

	area 0 {
		interface "ffhl" {
			authentication cryptographic;
			include "password.conf";
			type nonbroadcast;
			neighbors {
				10.130.0.252 eligible; # huextertor
				10.130.0.253 eligible; # holstentor
				10.130.0.254 eligible; # muehlentor
				10.130.0.255 eligible; # kaisertor
			};
		};
	};
};


protocol ospf v3 ospf_mesh6 {
	ipv6 {
		preference 90;
		export where !((OWNMAGIC, 1) ~ bgp_community) && proto != "rip_mesh" && proto != "unreachable_default";
		import all;
	};

	area 0 {
		interface "ffhl" {
			# OSPFv3 authentication not yet supported by bird
			# authentication cryptographic;
			# include "password.conf";
			type nonbroadcast;
			neighbors {
				2001:67c:2d50::801 eligible; # huextertor
				2001:67c:2d50::a01 eligible; # muehlentor
				2001:67c:2d50::c01 eligible; # holstentor
				2001:67c:2d50::e01 eligible; # burgtor
			};
		};
	};
};














# Kernel routing tables
########################

protocol kernel kernel_mesh4 {
	scan time 20;
	# device routes; # TODO: what is the equivalent in bird2?
	ipv4 {
		import none;
		export filter {
			if is_dn42()     then { krt_prefsrc = OWNIP; accept ; }
			if is_freifunk() then { krt_prefsrc = OWNIP; accept ; }
			reject;
		};
	};
};


protocol kernel kernel_mesh6 {
	scan time 20;
	# device routes; # TODO: what is the equivalent in bird2?

	ipv6 {
		import none;
		export filter {
			if is_ula() then { krt_prefsrc = ULA_IP; accept; }
			if is_self() then { krt_prefsrc = PUBLIC_IP; accept; }
			reject;
		};
	};
}



protocol kernel {
	kernel table KERNEL_TABLE;
	scan time 20;
	# device routes;
	ipv4 {
		table kernelcopy4;
		import none;
		export filter {
			if is_default()  then reject;
			if is_dn42()     then { krt_prefsrc = OWNIP; accept ; }
			if is_freifunk() then { krt_prefsrc = OWNIP; accept ; }
			reject;
		};
	};
}


protocol kernel {
	kernel table KERNEL_TABLE;
	scan time 20;
	# device routes;

	ipv6 {
		table kernelcopy6;
		import none;
		export all;
	};
}







# plumbing
###########

protocol pipe {
	table master4;
	peer table kernelcopy4;
	import none;
	export all;
}

protocol pipe {
	table master6;
	peer table kernelcopy6;
	import none;
	export all;
}




protocol pipe {
	table master4;
	peer table peering4;
	import all;
	export none;
}

protocol pipe {
	table master6;
	peer table peering6;
	import all;
	export none;
}



protocol pipe {
	table master4;
	peer table mesh4;
	import where source != RTS_STATIC;
	export where is_default() || is_self();
}

protocol pipe {
	table master6;
	peer table mesh6;
	import where source != RTS_STATIC;
	export where is_default() || is_self();
}



protocol pipe {
	table master6;
	peer table transit6;
	import all;
	export none;
}





# static routes
################

protocol static unreachable_default4 {
	ipv4 {
		preference 0;
	};

	route 0.0.0.0/0 reject;
}

protocol static unreachable_default {
	ipv6 {
		preference 0;
	};

	route ::/0 reject;
}



# InterCity VPN peerings
#########################
# these templates are applied on the routes generated by the icvpn-meta script and included
# From our icvpn peers, import everything that ist freifunk, dn42 or chaosvpn
# but dont import our own routes. Announce all Freifunk and dn42 routes we have.
# "but why don't we export ourself?". We do. is_freifunk() also covers 10.130.0.0/16
template bgp bgp_icvpn4 {
	ipv4 {
		table peering4;
		import where (is_freifunk() || is_dn42() || is_chaosvpn()) && !is_self();
		export where (is_freifunk() || is_dn42());
	};
	ipv6 {
		table peering6;
		import keep filtered;
		import filter bgp_import_filter;
		export all;
	};

	local as OWNAS;
};


# template bgp bgp_icvpn {
# 	ipv6 {
# 		table peering6;
# 		import keep filtered;
# 		import filter bgp_import_filter;
# 		export all;
# 	};

# 	local as OWNAS;
# }



# public IPv6
##############

template bgp bgp_public {
	ipv6 {
		table transit6;
		import where !is_self() && is_global();
		export where is_self_public();
		next hop self;
	};

	local as OWNAS;
}


# Include local configuration
# '?' instead of 'f' avoids failures when these
# files do not exist
################################################

include "bird_local.con?";
include "bird_ibgp.conf";
include "bird_icvpn.con?";
include "bird_ffrhein.con?";
