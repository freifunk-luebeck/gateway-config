table peering;
table transit;
table kernelcopy;
table mesh;

protocol device {
  scan time 10;
}

# host configuration
#####################

include "bird6_host.conf";

# constants
############

define OWNAS        = 201173;
define OWNMAGIC     = 42;
define KERNEL_TABLE = ipt_freifunk;

# ROA table
############

roa table roa_icvpn {
  include "roa.ip6";
}

# filter helpers
#################

function is_default()     { return net ~ [ ::/0                ]; }
function is_global()      { return net ~ [ 2000::/3+           ]; }
function is_ula()         { return net ~ [ fc00::/7{48,64}     ]; }
function is_freifunk()    { return net ~ [ 2001:bf7::/32+      ]; }
function is_self_public() { return net ~ [ 2001:67c:2d50::/48+ ]; }
function is_self_net()    { return net ~ [ fdef:ffc0:3dd7::/48+
                                         , 2001:67c:2d50::/48+
                                         ]; }
function is_self_mesh()   { return net ~ [ fdef:ffc0:3dd7::/64+
                                         , 2001:67c:2d50::/64+
                                         ]; }

function is_self_mgmt()   { return net ~ [ 2001:67c:2d50:1::a82:7fe0/123+ ]; }

# filters
##########

filter bgp_import_filter {
  if is_self_net() then reject;
  if is_ula() then accept;
  if roa_check(roa_icvpn) = ROA_VALID then {
    accept;
  } else {
    print "ROA check failed for ", net, " ASN ", bgp_path.last;
  }
  reject;
}

# static routes
################

protocol static local_freifunk {
  table peering;
  route fdef:ffc0:3dd7::/48 reject;
  route 2001:67c:2d50::/48 reject;
}

protocol static local_freifunk_transit {
  table transit;
  route 2001:67c:2d50::/48 reject;
}

protocol static local_mesh {
  route fdef:ffc0:3dd7::/64 via "freifunk-hl";
  route 2001:67c:2d50::/64 via "freifunk-hl";
}

protocol static mesh_ula {
  table mesh;
  route fc00::/7 reject;
}

# 464XLAT
##########

protocol static static_464xlat {
  route 2001:67c:2d50:1::/96 via "nat64";
}

# Mesh-internal routing
########################

protocol rip rip_mesh {
  table mesh;
  interface "freifunk-hl";
  preference 10;
  import where is_self_net() && !is_self_mgmt();
  export where is_self_net() || is_default() || (!((OWNMAGIC, 1) ~ bgp_community) && is_ula()) || source = RTS_STATIC;
}

# OSPF between gateways
########################

protocol ospf ospf_mesh {
	preference 90;
	export where !((OWNMAGIC, 1) ~ bgp_community) && proto != "rip_mesh" && proto != "unreachable_default";
	import all;
	area 0 {
		interface "freifunk-hl" {
# OSPFv3 authentication not yet supported by bird
#			authentication cryptographic;
#			include "password.conf";
			type nonbroadcast;
			neighbors {
				2001:67c:2d50::801 eligible; # huextertor
				2001:67c:2d50::a01 eligible; # muehlentor
				2001:67c:2d50::c01 eligible; # holstentor
				2001:67c:2d50::e01 eligible; # burgtor
			};
		};
	};
};

# Kernel routing tables
########################

protocol kernel {
  scan time 20;
  device routes;
  import none;
  export filter {
    if is_ula()      then { krt_prefsrc = ULA_IP;    accept; }
    if is_self_net() then { krt_prefsrc = PUBLIC_IP; accept; }
    reject;
  };
}

protocol kernel {
  table kernelcopy;
  kernel table KERNEL_TABLE;
  scan time 20;
  device routes;
  import none;
  export all;
}

# plumbing
###########

protocol pipe {
  peer table kernelcopy;
  import none;
  export all;
}

protocol pipe {
  peer table peering;
  import all;
  export none;
}

protocol pipe {
  peer table transit;
  import all;
  export none;
}

protocol pipe {
  peer table mesh;
  import where source != RTS_STATIC;
  export where is_default() || is_self_net();
}

# static routes
################

protocol static unreachable_default {
  preference 0;
  route ::/0 reject;
}

# Mesh-internal BGP between all gateways
#########################################

template bgp bgp_ibgp {
  table peering;
  local as OWNAS;
  direct;
  import all;
  export filter { bgp_community.add((OWNMAGIC, 1));
                  if source = RTS_BGP then accept;
                  reject;
                };
}

# InterCity VPN peerings
#########################

template bgp bgp_icvpn {
  table peering;
  local as OWNAS;
  import keep filtered;
  import filter bgp_import_filter;
  export all;
}

# public IPv6
##############

template bgp bgp_public {
  table transit;
  local as OWNAS;
  import where !is_self_net() && is_global();
  export where is_self_public();
  next hop self;
}

# DN42 peerings
################

template bgp bgp_dn42 {
  table peering;
  local as OWNAS;
  import filter bgp_import_filter;
  export all;
}

# anycast DNS
##############

protocol static anycast_dns {
  route 2001:67c:2d50:1::10.130.127.224/128 via "anycast-dns";
}

# Include local configuration
# '?' instead of 'f' avoids failures when these
# files do not exist
################################################

include "bird6_local.con?";
include "bird6_ibgp.con?";
include "bird6_icvpn.con?";
