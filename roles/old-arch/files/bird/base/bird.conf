table peering;
table kernelcopy;
table mesh;

protocol device {
	scan time 10;
}

# host configuration
#####################

include "bird_host.conf";

# constants
############

define OWNAS = 201173;
define OWNMAGIC = 42;
define KERNEL_TABLE = ipt_freifunk;

# filter helpers
#################

function is_default()        { return net ~ [ 0.0.0.0/0          ]; }
function is_freifunk()       { return net ~ [ 10.0.0.0/8+        ]; }
function is_dn42()           { return net ~ [ 172.22.0.0/15+, 172.20.0.0/16+ ]; }
function is_chaosvpn()       { return net ~ [ 172.31.0.0/16+     ]; }
function is_self_net()       { return net ~ [ 10.130.0.0/16+     ]; }
function is_self_mesh()      { return net ~ [ 10.130.0.0/20+     ]; }
function is_self_private()   { return net ~ [ 10.130.64.0/18+    ]; }
function is_self_mgmt()      { return net ~ [ 10.130.127.224/27+ ]; }

# static routes
################

protocol static static_mesh {
	table peering;
	route 10.130.0.0/16 reject;
};

protocol static local_mesh {
	route 10.130.0.0/20 via "freifunk-hl";
};

protocol static mesh_dn42 {
  table mesh;
  route 172.20.0.0/16 reject;
  route 172.22.0.0/15 reject;
};

protocol static mesh_freifunk {
  table mesh;
  route 10.0.0.0/8 reject;
};

# 464XLAT
##########

protocol static static_464xlat {
  route 10.130.64.0/18 via "nat64";
}

# Mesh-internal routing
########################

protocol rip rip_mesh {
  table mesh;
	interface "freifunk-hl";
	import where is_self_private() && !is_self_mgmt();
	export where !((OWNMAGIC, 1) ~ bgp_community) && !is_self_mesh();
};

# OSPF between gateways
########################

protocol ospf ospf_mesh {
	preference 90;
	export where !((OWNMAGIC, 1) ~ bgp_community) && proto != "rip_mesh";
	import all;
	area 0 {
		interface "freifunk-hl" {
			authentication cryptographic;
			include "password.conf";
			type nonbroadcast;
			neighbors {
				10.130.0.252 eligible; # huextertor
				10.130.0.253 eligible; # holstentor
				10.130.0.254 eligible; # muehlentor
				10.130.0.255 eligible; # burgtor
			};
		};
	};
};

# Kernel routing tables
########################

protocol kernel {
	scan time 20;
	device routes;
	import none;
	export filter {
		if is_dn42()     then { krt_prefsrc = OWNIP; accept ; }
		if is_freifunk() then { krt_prefsrc = OWNIP; accept ; }
		reject;
	};
};

protocol kernel {
	table kernelcopy;
	kernel table KERNEL_TABLE;
	scan time 20;
	device routes;
	import none;
	export filter {
		if is_default()  then accept;
		if is_dn42()     then { krt_prefsrc = OWNIP; accept ; }
		if is_freifunk() then { krt_prefsrc = OWNIP; accept ; }
		reject;
	};
}

# plumbing
###########

protocol pipe {
	peer table kernelcopy;
	import none;
	export all;
}

protocol pipe {
	peer table peering;
	import all;
	export none;
}

protocol pipe {
  peer table mesh;
  import where source != RTS_STATIC;
  export where is_default() || is_self_net();
}

# static routes
################

protocol static unreachable_default {
	preference 0;
	route 0.0.0.0/0 reject;
}

# Mesh-internal BGP between all gateways
#########################################

template bgp bgp_ibgp {
	table peering;
	local as OWNAS;
	direct;
	import all;
	export filter { bgp_community.add((OWNMAGIC, 1));
	                if is_default() then reject;
	                if source = RTS_BGP then accept;
	                reject;
	              };
}

# InterCity VPN peerings
#########################

template bgp bgp_icvpn {
	table peering;
	local as OWNAS;
	import where (is_freifunk() || is_dn42() || is_chaosvpn()) && !is_self_net();
	export where (is_freifunk() || is_dn42());
};

# ffrheinland ipv4
###################

template bgp bgp_ffrhein {
	table peering;
	local as 201173;
	import all;
	export where net ~ [185.66.193.32/29+];
	next hop self;
}

# DN42 peerings
################

template bgp bgp_dn42 {
	table peering;
	local as OWNAS;
	import where is_dn42() || is_chaosvpn();
	export where !is_default();
};

# Include local configuration
# '?' instead of 'f' avoids failures when these
# files do not exist
################################################

include "bird_local.con?";
include "bird_ibgp.con?";
include "bird_icvpn.con?";
include "bird_ffrhein.con?";
