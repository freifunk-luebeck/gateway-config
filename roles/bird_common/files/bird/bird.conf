# debugging
log syslog all;
#debug protocols all;

ipv6 table peering;
# exported to the real kernel routing table
ipv6 table kernelcopy;
ipv6 table mesh;
# for peering with externel providers
ipv6 table transit;

roa6 table roa_icvpn;

protocol device {
    scan time 10;
}

# host configuration
#####################

include "bird_host.conf";

# constants
############

define OWNAS = 201173;
define OWNMAGIC = 42;
define KERNEL_TABLE = ipt_freifunk;

# ROA table:
#############
# These tables are generated by a script in the icvpn-meta repository

protocol static {
    roa6 {table roa_icvpn; };
    include "icvpn_roa.con?";
}


# filter helpers
#################

function is_default()      { return net ~ [ ::/0 ]; }

function is_freifunk()     { return net ~ [ 2001:bf7::/32+ ]; }
function is_self()         { return net ~ [ fdef:ffc0:3dd7::/48+, 2001:67c:2d50::/48+, 2001:bf7:110::/44+ ]; }

function is_self_mesh()    { return net ~ [ fdef:ffc0:3dd7::/64+, 2001:67c:2d50::/64+ ]; }
function is_self_public()  { return net ~ [ 2001:67c:2d50::/48+ ]; }

function is_global()       { return net ~ [ 2000::/3+ ]; }
function is_ula()          { return net ~ [ fc00::/7{48,64} ]; }
function is_self_mgmt()    { return net ~ [ 2001:67c:2d50:1::a82:7fe0/123+ ]; }



# Filters:
###########

filter bgp_import_filter {
    if is_self() then reject;
    if is_ula() then accept;

    if roa_check(roa_icvpn) = ROA_VALID then {
        accept;
    } else {
    	# print "ROA check failed for ", net, " ASN ", bgp_path.last;
        reject;
    }
    accept;
};



# static routes
################

protocol static local_mesh6 {
    ipv6 { table peering; };
    route fdef:ffc0:3dd7::/64 via "ffhl";
    route 2001:67c:2d50::/64 via "ffhl";
};

protocol static local_freifunk {
    ipv6 { table peering; };
    route fdef:ffc0:3dd7::/48 reject;
    route 2001:67c:2d50::/48 reject;
}


# Kernel routing tables
########################

protocol kernel kernel_mesh6 {
    scan time 20;
    # device routes; # TODO: what is the equivalent in bird2?

    kernel table KERNEL_TABLE;

    ipv6 {
        import none;
        export filter {
            if is_ula() then { krt_prefsrc = ULA_IP; accept; }
            if is_self() then { krt_prefsrc = PUBLIC_IP; accept; }
            if is_global() then accept;
            reject;
        };
    };
}

protocol kernel {
    kernel table KERNEL_TABLE;
    scan time 20;
    # device routes;

    ipv6 {
        table kernelcopy;
        import none;
        export all;
    };
}


# plumbing
###########


protocol pipe {
    table master6;
    peer table kernelcopy;
    import none;
    export all;
}

protocol pipe {
    table master6;
    peer table peering;
    import all;
    export where is_global();
}

protocol pipe {
    table master6;
    peer table mesh;
    import where source != RTS_STATIC;
    export where is_default() || is_self();
}


protocol pipe {
    table master6;
    peer table transit;
    import all;
    export where is_self_public();
}


# static routes
################

protocol static unreachable_default {
    ipv6 {
        preference 0;
    };

    route ::/0 reject;
}


# IBGP
#######

template bgp bgp_ibgp {
    local as OWNAS;
    ipv6 {
        table peering;
        next hop self;
        import all;
        export filter {
            bgp_community.add((OWNMAGIC,1));
            if source = RTS_BGP then accept;
            reject;
        };
    };
};


# InterCity VPN peerings
#########################
# these templates are applied on the routes generated by the icvpn-meta script and included
# From our icvpn peers, import everything that ist freifunk, dn42 or chaosvpn
# but dont import our own routes. Announce all Freifunk and dn42 routes we have.
# "but why don't we export ourself?". We do. is_freifunk() also covers 10.130.0.0/16


template bgp bgp_icvpn {
    ipv6 {
        table peering;
        #import keep filtered;
        import filter bgp_import_filter;
        export where is_self();
    };

    local as OWNAS;
};


# public IPv6
##############

template bgp bgp_public {
    local as OWNAS;
    ipv6 {
        table transit;
        import where !is_self() && is_global();
        next hop self;
        export where is_self_public();
    };
}



# Include files in ALPHABETIC order. example:
# 1.conf
# 10.conf
# 2.conf
# 10.conf gets included before 2.conf. Use 01.conf and 02.conf instead
include "bird.conf.d/*.conf";
