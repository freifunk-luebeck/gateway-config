# debugging
log syslog all;
#debug protocols all;

ipv6 table peering;
# exported to the real kernel routing table
ipv6 table kernelcopy;
ipv4 table kernelcopy4;

ipv6 table mesh;
# for peering with externel providers
ipv6 table transit;

ipv4 table gateways4;

roa6 table roa_icvpn;

protocol device {
    scan time 10;
}

# host configuration
#####################

include "bird_host_vars.conf";

# constants
############

define OWNAS = 201173;
define OWNMAGIC = 42;
define KERNEL_TABLE = ipt_freifunk;


# ROA table:
#############
# These tables are generated by a script in the icvpn-meta repository

protocol static {
    roa6 {table roa_icvpn; };
    include "icvpn_roa.con?";
}


# filter helpers
#################

function is_default()      { return net ~ [ ::/0 ]; }
function is_default4()     { return net ~ [ 0.0.0.0/0 ]; }

function is_global()       { return net ~ [ 2000::/3+ ]; }
function is_ula()          { return net ~ [ fc00::/7{48,64} ]; }
function is_private()      { return net ~ [ 10.0.0.0/8+, 172.16.0.0/12+, 192.168.0.0/16+ ]; }

function is_self()         { return net ~ [ fdef:ffc0:3dd7::/48+, 2001:67c:2d50::/48+, 2001:bf7:110::/44+ ]; }
function is_self4()        { return net ~ [ 10.130.0.0/16+ ]; }

function is_self_mesh()    { return net ~ [ fdef:ffc0:3dd7::/64+, 2001:67c:2d50::/64+ ]; }

function is_self_public()  { return is_self() && is_global(); }



# Filters:
###########

filter bgp_import_filter {
    if is_self() then reject;
    if is_ula() then accept;

    if roa_check(roa_icvpn) = ROA_VALID then {
        accept;
    } else {
    	# print "ROA check failed for ", net, " ASN ", bgp_path.last;
        reject;
    }
    accept;
};



# static routes
################

protocol static unreachable_default {
    ipv6 { preference 0; };
    route ::/0 reject;
}

protocol static unreachable_default4 {
    ipv4 { preference 0; };
    route 0.0.0.0/0 reject;
}

protocol static local_mesh6 {
    ipv6 { table peering; };
    route fdef:ffc0:3dd7::/64 via "ffhl";
    route 2001:67c:2d50::/64 via "ffhl";
};

protocol static local_freifunk {
    ipv6 { table peering; };
    route fdef:ffc0:3dd7::/48 blackhole;
    route 2001:67c:2d50::/48 blackhole;
};


# Kernel routing tables
########################
# export routes to the kernel

protocol kernel {
    kernel table KERNEL_TABLE;
    scan time 20;

    ipv6 {
        table kernelcopy;
        import none;
        export all;
    };
};

protocol kernel {
    kernel table KERNEL_TABLE;
    scan time 20;

    ipv4 {
        table kernelcopy4;
        import none;
        export all;
    };
}


# plumbing
###########


# master -> kernel
protocol pipe {
    table master6;
    peer table kernelcopy;
    import none;
    export all;
}

protocol pipe {
    table master4;
    peer table kernelcopy4;
    import none;
    export all;
}


# peering
protocol pipe {
    table master6;
    peer table peering;
    import all;
    export where is_global();
}


protocol pipe {
    table master6;
    peer table mesh;
    import where source != RTS_STATIC;
    export where is_default() || is_self();
}

protocol pipe {
    table master6;
    peer table transit;
    import all;
    export where is_self_public();
}



# IBGP
#######

template bgp bgp_ibgp {
    local as OWNAS;
    ipv6 {
        table peering;
        next hop self;
        import all;
        export filter {
            bgp_community.add((OWNMAGIC,1));
            if source = RTS_BGP then accept;
            reject;
        };
    };
};



# InterCity VPN peerings
#########################
# these templates are applied on the routes generated by the icvpn-meta script and included
# From our icvpn peers, import everything that ist freifunk, dn42 or chaosvpn
# but dont import our own routes. Announce all Freifunk and dn42 routes we have.


template bgp bgp_icvpn {
    ipv6 {
        table peering;
        #import keep filtered;
        import filter bgp_import_filter;
        export where is_self();
    };

    local as OWNAS;
};


# public IPv6
##############

template bgp bgp_public {
    local as OWNAS;
    ipv6 {
        table transit;
        import where !is_self() && is_global();
        next hop self;
        export where is_self_public();
    };
}

# route collectors: only export, don't import
template bgp bgp_routecollector {
    local as OWNAS;
    # enable multihop as the collector is not locally connected
    multihop;

    ipv6 {
        table peering;
        # export all available paths to the collector
        add paths tx;

        # import/export filters
        import none;
        export filter {
            # export all valid routes
            if ( is_global() && source ~ [ RTS_STATIC, RTS_BGP ] )
            then {
              accept;
            }
            reject;
        };
    };
}


# Include files in ALPHABETIC order. example:
# 1.conf
# 10.conf
# 2.conf
# 10.conf gets included before 2.conf. Use 01.conf and 02.conf instead
include "bird.conf.d/*.conf";
