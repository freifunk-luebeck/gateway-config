---
- name: create fastd user
  user:
    name: fastd
    system: yes
    home: /etc/fastd

- name: create fastd config dirs
  loop: "{{ mesh_vpn_instances }}"
  file:
    path: /etc/fastd/{{ item.name }}
    state: directory

- name: copy fastd config templates
  loop: "{{ mesh_vpn_instances }}"
  template:
    src: mesh-vpn/fastd.conf
    dest: /etc/fastd/{{ item.name }}/fastd.conf
    mode: '0640'

- name: create fastd-up script
  loop: "{{ mesh_vpn_instances }}"
  template:
    src: mesh-vpn/fastd-up
    dest: /etc/fastd/{{ item.name }}/fastd-up
    mode: '0755'


# configure peers git
# add update script
- name: copy update script
  template:
    src: mesh-vpn/update-meshvpn-keys.sh
    dest: /usr/local/lib/ffhl/
    mode: 775

- name: install mesh-vpn peer update service
  copy:
    src: mesh-vpn/systemd/
    dest: /etc/systemd/system/
    owner: root


# enable services

# download public keys to our local machine
- name: run meshvpn-keys update script
  shell:
    cmd: /usr/local/lib/ffhl/update-meshvpn-keys.sh

- name: enable fastd instances
  loop: "{{ mesh_vpn_instances }}"
  systemd:
    enabled: yes
    daemon-reload: yes
    state: restarted
    name: fastd@{{ item.name }}

- name: enable mesh-vpn peer update job
  systemd:
    name: update-ffhl-mesh-vpn.timer
    enabled: yes
    state: started


# download public keys to our local machine
- name: create public key files
  loop: "{{ mesh_vpn_instances }}"
  shell:
    cmd: fastd --show-key -c /etc/fastd/{{ item.name }}/fastd.conf > /etc/fastd/{{ item.name }}/pubkey.key

- name: fetch public keys
  loop: "{{ mesh_vpn_instances }}"
  fetch:
    src: /etc/fastd/{{ item.name }}/pubkey.key
    dest: artifacts/
